<?php

class AdminBar extends WireData implements Module, ConfigurableModule {

        /**
         * This is where you define some basic info about your module.
         *
         * See /wire/core/Module.php for definitions of all these.
         *
         */
        public static function getModuleInfo() {
                return array(
                        'title' => 'Admin Bar',
                        'summary' => 'Fast and easy in-page content editing, by apeisa & adamkiss',
                        'href' => 'http://processwire.com/talk/index.php/topic,56.0.html',
                        'version' => 100,
                        'permanent' => false,
                        'autoload' => true,
                        'singular' => true,
                        );
        }

        public function __construct() {
                $this->showModal = true;
        }

        /**
         * Initialize the module and setup hooks
         *
         * The init method of a module is called right after ProcessWire is bootstrapped, when all
         * API vars are ready. Whereas the __construct() is called DURING bootstrap, so the init()
         * method is a better place to attach hooks to API vars.
         *
         * In this method, we'll use an 'after' hook since we want to modify the output of the
         * rendered page template.
         *
         * Note also that the 'Class::method' syntax means it hooks into ALL Page instances.
         * The syntax for hooking to a single instance would be:
         * $page->addHookAfter('render', $this, 'pageRender');
         *
         * Also note that there isn't actually a Page::render method, it was instead added by
         * another module (wire/modules/PageRender.module). Not that it matters here, but just
         * wanted to mention in case you look in the Page class and don't see a render method.
         *
         */
        public function init() {
                $this->pages->addHookAfter('save', $this, 'pageSave');
                $this->addHookAfter('Page::render', $this, "pageRender");

                // hook before forms are rendered, so that we can modify the form's "action" attribute
                $this->addHookBefore('InputfieldForm::render', $this, 'formRender');

                // hook before a redirect occurs, os we can modify the redirect URL
                $this->session->addHookBefore('redirect', $this, 'sessionRedirect');
        }

        static public function getModuleConfigInputfields(array $data) {

                // this is a container for fields, basically like a fieldset
                $fields = new InputfieldWrapper();

                // since this is a static function, we can't use $this->modules, so get them from the global wire() function
                $modules = wire('modules');

                // set some defaults if the values aren't already present
                if(!isset($data['showModal'])) $data['showModal'] = 1; // default to checked
                if(!isset($data['initCollapsed'])) $data['initCollapsed'] = 0; // default to unchecked
                if(!isset($data['administration'])) $data['administration'] = wire('config')->adminRootPageID; // default to admin page

                // showModal field
                $field = $modules->get("InputfieldCheckbox");
                $field->name = "showModal";
                $field->label = "Show modal box?";
                $field->description = "Whether edit opens modal box or goes to administration.";
                $field->attr('checked', !empty($data['showModal']));
                $fields->add($field);

                // initCollapsed field
                $field = $modules->get("InputfieldCheckbox");
                $field->name = "initCollapsed";
                $field->label = "Init collapsed?";
                $field->attr('checked', !empty($data['initCollapsed']));
                $fields->add($field);

                // administration field
                $field = $modules->get("InputfieldPageListSelect");
                $field->name = "administration";
                $field->label = "Where to go after clicking on 'administration'";
                $field->value = $data['administration'];
                $fields->add($field);

                return $fields;
        }

        /**
         * Hook called when a page is rendered
         *
         * The method name used here does not matter, it just has to be consistent with the name you provided
         * when creating the hook.
         *
         * This method is given an $event object of type HookEvent. To see what's in that, see this file:
         * /wire/core/HookEvent.php (it's very short and simple)
         *
         */
        public function pageRender($event) {

                // $event->object always has the object instance that resulted in this call
                $page = $event->object;

                // If we have saved page, we are in admin in modal, then we make js-redirect and break out of modal
                if ($this->session->pageSaved && $page->template == 'admin' && $this->input->get->modal) {
                  echo("<script language=\"javascript\">");
                  echo("top.location.href = \"{$this->config->urls->root}{$this->session->pageSaved}\";");
                  echo("</script>");
                  die();
                } elseif ($page->template == 'admin') {
                  $this->session->remove('pageSaved');
                }

                // if the page isn't editable, or if it's using the admin template, abort.
                if(!$page->editable() || $page->template == 'admin') return;

                // find the location of this module for linking css and js files
                $url = $this->config->urls->AdminBar . "AdminBar";

                // the css and js links we're going to add
                $out =  "\n\t<link rel='stylesheet' type='text/css' href='$url.css' />" .
                        "\n\t<script type='text/javascript' src='$url.js'></script>" .
                        "\n</head>";

                // modify the value returned by $page->render() to include our css and js files
                $event->return = str_ireplace('</head>', $out, $event->return);

                $out  = "<div id='editbar'>";
                $out .=   "<div class='main collapsed'>";
                $out .=     "<div class='logged-in'><a href='#'>{$this->user->name}</a></div>";
                $out .=     "<ul class='dates'>";
                $out .=       "<li class='created' title='Created'>{$page->createdUser} | ". date('d.m.y H:i', $page->created) . "</li>";
                $out .=       "<li class='modified' title='Modified'>{$page->modifiedUser} | ". date('d.m.y H:i', $page->modified) . "</li>";
                $out .=     "</ul>";
                $out .=     "<ul class='menu'>";
                if (isset($this->showModal)) {
                  $out .=     "<li><a href='{$this->config->urls->admin}page/edit/?id={$this->page->id}&modal=true' class='modal edit'>Edit this page</a></li>";
                } else {
                  $out .=     "<li><a href='{$this->config->urls->admin}page/edit/?id={$this->page->id}' class='edit'>Edit this page</a></li>";
                }
                $out .=       "<li><a href='{$this->config->urls->admin}' class='pages'>Go to administration</a></li>";
                $out .=       "<li><a href='{$this->config->urls->admin}logout/' class='logout'>Logout</a></li>";
                $out .=     "</ul>";
                $out .=   "</div>";
                $out .=   "<ul class='shortcuts'>";
                //$out .=     "<li><a href='#' class='pages'>Pages tree</a></li>";
                //$out .=     "<li><a href='#' class='add'>Add child</a></li>";
                $out .=     "<li><a href='{$this->config->urls->admin}page/edit/?id={$this->page->id}&modal=true' class='modal edit'>Edit this page</a></li>";
                $out .=   "</ul>";
                $out .= "</div>";
                if ($this->session->pageSaved) {
                  $out .= "<div id='ab-pagesaved-cont'><div id='ab-pagesaved'>Page {$this->session->pageSaved} saved succesfully</div></div>";
                  $this->session->remove('pageSaved');
                } else {
                  $this->session->remove('pageSaved');
                }
                $out .= "</body>";

                // And then we add needed markup
                $event->return = str_ireplace('</body>', $out, $event->return);
        }

        public function pageSave($event) {
                $page = $event->arguments[0];
                $this->session->pageSaved = "{$page->path}";
        }

        /**
         * Hook to take place before forms are rendered
         *
         * We check if there is a 'modal' get var set, and if so, we add it to the form's action attribute
         *
         */
        public function formRender($event) {
                if(!$this->input->get->modal) return;
                $form = $event->object;
                $action = $form->attr('action');
                $action .= (strpos($action, '?') !== false ? '&' : '?') . "modal=1";
                $form->attr('action', $action);
        }

       /**
         * Hook to take place right before a redirect occurs
         *
         * We intercept the redirect URL and modify it to add 'modal=1' to the query string
         *
         */
        public function sessionRedirect($event) {
                if(!$this->page || $this->page->template != 'admin') return;
                if(!$this->input->get->modal) return;
                $url = $event->arguments(0);
                if(preg_match('/[?&]modal=/', $url)) return;
                $url .= (count($this->input->get) ? '&' : '?') . "modal=1";
                $event->arguments(0, $url);
        }
}
